// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/contracts/audit_logger.go

// Package mock_contracts is a generated GoMock package.
package mock_repositoty

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAuditLogger is a mock of IAuditLogger interface.
type MockIAuditLogger struct {
	ctrl     *gomock.Controller
	recorder *MockIAuditLoggerMockRecorder
}

// MockIAuditLoggerMockRecorder is the mock recorder for MockIAuditLogger.
type MockIAuditLoggerMockRecorder struct {
	mock *MockIAuditLogger
}

// NewMockIAuditLogger creates a new mock instance.
func NewMockIAuditLogger(ctrl *gomock.Controller) *MockIAuditLogger {
	mock := &MockIAuditLogger{ctrl: ctrl}
	mock.recorder = &MockIAuditLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuditLogger) EXPECT() *MockIAuditLoggerMockRecorder {
	return m.recorder
}

// LogAction mocks base method.
func (m *MockIAuditLogger) LogAction(userIdentifier int, eventId, action string, details *map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogAction", userIdentifier, eventId, action, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogAction indicates an expected call of LogAction.
func (mr *MockIAuditLoggerMockRecorder) LogAction(userIdentifier, eventId, action, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogAction", reflect.TypeOf((*MockIAuditLogger)(nil).LogAction), userIdentifier, eventId, action, details)
}
