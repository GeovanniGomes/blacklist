// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/persistence/contracts/audit_logger.go

// Package mock_contracts is a generated GoMock package.
package mock_contracts

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuditLoggerInterface is a mock of AuditLoggerInterface interface.
type MockAuditLoggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLoggerInterfaceMockRecorder
}

// MockAuditLoggerInterfaceMockRecorder is the mock recorder for MockAuditLoggerInterface.
type MockAuditLoggerInterfaceMockRecorder struct {
	mock *MockAuditLoggerInterface
}

// NewMockAuditLoggerInterface creates a new mock instance.
func NewMockAuditLoggerInterface(ctrl *gomock.Controller) *MockAuditLoggerInterface {
	mock := &MockAuditLoggerInterface{ctrl: ctrl}
	mock.recorder = &MockAuditLoggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditLoggerInterface) EXPECT() *MockAuditLoggerInterfaceMockRecorder {
	return m.recorder
}

// LogAction mocks base method.
func (m *MockAuditLoggerInterface) LogAction(userIdentifier int, eventId, action string, details *map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogAction", userIdentifier, eventId, action, details)
}

// LogAction indicates an expected call of LogAction.
func (mr *MockAuditLoggerInterfaceMockRecorder) LogAction(userIdentifier, eventId, action, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogAction", reflect.TypeOf((*MockAuditLoggerInterface)(nil).LogAction), userIdentifier, eventId, action, details)
}
