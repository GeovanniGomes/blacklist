// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/contracts/repository/blacklist_interface.go

// Package mock_repositoty is a generated GoMock package.
package mock_contracts

import (
	reflect "reflect"
	time "time"

	entity "github.com/GeovanniGomes/blacklist/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIBlackListRepository is a mock of IBlackListRepository interface.
type MockIBlackListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBlackListRepositoryMockRecorder
}

// MockIBlackListRepositoryMockRecorder is the mock recorder for MockIBlackListRepository.
type MockIBlackListRepositoryMockRecorder struct {
	mock *MockIBlackListRepository
}

// NewMockIBlackListRepository creates a new mock instance.
func NewMockIBlackListRepository(ctrl *gomock.Controller) *MockIBlackListRepository {
	mock := &MockIBlackListRepository{ctrl: ctrl}
	mock.recorder = &MockIBlackListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBlackListRepository) EXPECT() *MockIBlackListRepositoryMockRecorder {
	return m.recorder
}

// AddBlacklist mocks base method.
func (m *MockIBlackListRepository) AddBlacklist(blacklist *entity.BlackList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlacklist", blacklist)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlacklist indicates an expected call of AddBlacklist.
func (mr *MockIBlackListRepositoryMockRecorder) AddBlacklist(blacklist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlacklist", reflect.TypeOf((*MockIBlackListRepository)(nil).AddBlacklist), blacklist)
}

// AddEvent mocks base method.
func (m *MockIBlackListRepository) AddEvent(event entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockIBlackListRepositoryMockRecorder) AddEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockIBlackListRepository)(nil).AddEvent), event)
}

// CheckBlacklist mocks base method.
func (m *MockIBlackListRepository) CheckBlacklist(userIndentifier int, eventId *string) (*entity.BlackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBlacklist", userIndentifier, eventId)
	ret0, _ := ret[0].(*entity.BlackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBlacklist indicates an expected call of CheckBlacklist.
func (mr *MockIBlackListRepositoryMockRecorder) CheckBlacklist(userIndentifier, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBlacklist", reflect.TypeOf((*MockIBlackListRepository)(nil).CheckBlacklist), userIndentifier, eventId)
}

// FetchBlacklistEntries mocks base method.
func (m *MockIBlackListRepository) FetchBlacklistEntries(startDate, endDate time.Time) ([]entity.BlackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBlacklistEntries", startDate, endDate)
	ret0, _ := ret[0].([]entity.BlackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlacklistEntries indicates an expected call of FetchBlacklistEntries.
func (mr *MockIBlackListRepositoryMockRecorder) FetchBlacklistEntries(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBlacklistEntries", reflect.TypeOf((*MockIBlackListRepository)(nil).FetchBlacklistEntries), startDate, endDate)
}

// GetEvent mocks base method.
func (m *MockIBlackListRepository) GetEvent(id string) (*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", id)
	ret0, _ := ret[0].(*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockIBlackListRepositoryMockRecorder) GetEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockIBlackListRepository)(nil).GetEvent), id)
}

// RemoveBlacklist mocks base method.
func (m *MockIBlackListRepository) RemoveBlacklist(userIndentifier int, eventId *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBlacklist", userIndentifier, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBlacklist indicates an expected call of RemoveBlacklist.
func (mr *MockIBlackListRepositoryMockRecorder) RemoveBlacklist(userIndentifier, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBlacklist", reflect.TypeOf((*MockIBlackListRepository)(nil).RemoveBlacklist), userIndentifier, eventId)
}

// RemoveEvent mocks base method.
func (m *MockIBlackListRepository) RemoveEvent(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEvent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEvent indicates an expected call of RemoveEvent.
func (mr *MockIBlackListRepositoryMockRecorder) RemoveEvent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEvent", reflect.TypeOf((*MockIBlackListRepository)(nil).RemoveEvent), id)
}
