// Code generated by MockGen. DO NOT EDIT.
// Source: internal/application/contracts/repository/blacklist_interface.go

// Package mock_repositoty is a generated GoMock package.
package mock_repositoty

import (
	reflect "reflect"

	entity "github.com/GeovanniGomes/blacklist/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockBlackListRepositoryInterface is a mock of BlackListRepositoryInterface interface.
type MockBlackListRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBlackListRepositoryInterfaceMockRecorder
}

// MockBlackListRepositoryInterfaceMockRecorder is the mock recorder for MockBlackListRepositoryInterface.
type MockBlackListRepositoryInterfaceMockRecorder struct {
	mock *MockBlackListRepositoryInterface
}

// NewMockBlackListRepositoryInterface creates a new mock instance.
func NewMockBlackListRepositoryInterface(ctrl *gomock.Controller) *MockBlackListRepositoryInterface {
	mock := &MockBlackListRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockBlackListRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlackListRepositoryInterface) EXPECT() *MockBlackListRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBlackListRepositoryInterface) Add(blacklist entity.BlackList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", blacklist)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBlackListRepositoryInterfaceMockRecorder) Add(blacklist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBlackListRepositoryInterface)(nil).Add), blacklist)
}

// Check mocks base method.
func (m *MockBlackListRepositoryInterface) Check(userIndentifier int, evendId string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", userIndentifier, evendId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockBlackListRepositoryInterfaceMockRecorder) Check(userIndentifier, evendId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockBlackListRepositoryInterface)(nil).Check), userIndentifier, evendId)
}

// Remove mocks base method.
func (m *MockBlackListRepositoryInterface) Remove(userIndentifier int, eventId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", userIndentifier, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockBlackListRepositoryInterfaceMockRecorder) Remove(userIndentifier, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBlackListRepositoryInterface)(nil).Remove), userIndentifier, eventId)
}
